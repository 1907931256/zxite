// ScintillaCtrl.odl : type library source for ActiveX Control project.

#include <olectl.h>
#include <idispids.h>

[ uuid(4A2DFF5F-C146-11D3-9CDF-482471000000), version(1.0),
  helpfile("ScintillaCtrl.hlp"),
  helpstring("ScintillaCtrl ActiveX Control module"),
  control ]
library SCINTILLACTRLLib
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	[ uuid(4A2DFF60-C146-11D3-9CDF-482471000000),
	  helpstring("Dispatch interface for Scintilla Control"), hidden ]
	dispinterface _DScintilla
	{
		properties:
			//$[ODLPROP_SECTION)
			//{{AFX_ODL_PROP(CScintillaCtrl)
			[id(1)] long INVALID_POSITION;
			[id(2)] long SCI_START;
			[id(3)] long SCI_OPTIONAL_START;
			[id(4)] long SCI_LEXER_START;
			[id(5)] long SCWS_INVISIBLE;
			[id(6)] long SCWS_VISIBLEALWAYS;
			[id(7)] long SCWS_VISIBLEAFTERINDENT;
			[id(8)] long SC_EOL_CRLF;
			[id(9)] long SC_EOL_CR;
			[id(10)] long SC_EOL_LF;
			[id(11)] long SC_CP_UTF8;
			[id(12)] long MARKER_MAX;
			[id(13)] long SC_MARK_CIRCLE;
			[id(14)] long SC_MARK_ROUNDRECT;
			[id(15)] long SC_MARK_ARROW;
			[id(16)] long SC_MARK_SMALLRECT;
			[id(17)] long SC_MARK_SHORTARROW;
			[id(18)] long SC_MARK_EMPTY;
			[id(19)] long SC_MARK_ARROWDOWN;
			[id(20)] long SC_MARK_MINUS;
			[id(21)] long SC_MARK_PLUS;
			[id(22)] long SC_MARKNUM_FOLDER;
			[id(23)] long SC_MARKNUM_FOLDEROPEN;
			[id(24)] long SC_MARGIN_SYMBOL;
			[id(25)] long SC_MARGIN_NUMBER;
			[id(26)] long STYLE_DEFAULT;
			[id(27)] long STYLE_LINENUMBER;
			[id(28)] long STYLE_BRACELIGHT;
			[id(29)] long STYLE_BRACEBAD;
			[id(30)] long STYLE_CONTROLCHAR;
			[id(31)] long STYLE_MAX;
			[id(32)] long SC_CHARSET_ANSI;
			[id(33)] long SC_CHARSET_DEFAULT;
			[id(34)] long SC_CHARSET_BALTIC;
			[id(35)] long SC_CHARSET_CHINESEBIG5;
			[id(36)] long SC_CHARSET_EASTEUROPE;
			[id(37)] long SC_CHARSET_GB2312;
			[id(38)] long SC_CHARSET_GREEK;
			[id(39)] long SC_CHARSET_HANGUL;
			[id(40)] long SC_CHARSET_MAC;
			[id(41)] long SC_CHARSET_OEM;
			[id(42)] long SC_CHARSET_RUSSIAN;
			[id(43)] long SC_CHARSET_SHIFTJIS;
			[id(44)] long SC_CHARSET_SYMBOL;
			[id(45)] long SC_CHARSET_TURKISH;
			[id(46)] long SC_CHARSET_JOHAB;
			[id(47)] long SC_CHARSET_HEBREW;
			[id(48)] long SC_CHARSET_ARABIC;
			[id(49)] long SC_CHARSET_VIETNAMESE;
			[id(50)] long SC_CHARSET_THAI;
			[id(51)] long INDIC_MAX;
			[id(52)] long INDIC_PLAIN;
			[id(53)] long INDIC_SQUIGGLE;
			[id(54)] long INDIC_TT;
			[id(55)] long INDIC_DIAGONAL;
			[id(56)] long INDIC_STRIKE;
			[id(57)] long INDIC0_MASK;
			[id(58)] long INDIC1_MASK;
			[id(59)] long INDIC2_MASK;
			[id(60)] long INDICS_MASK;
			[id(61)] long SC_PRINT_NORMAL;
			[id(62)] long SC_PRINT_INVERTLIGHT;
			[id(63)] long SC_PRINT_BLACKONWHITE;
			[id(64)] long SCFIND_MATCHCASE;
			[id(65)] long SCFIND_WHOLEWORD;
			[id(66)] long SCFIND_DOWN;
			[id(67)] long SC_FOLDLEVELBASE;
			[id(68)] long SC_FOLDLEVELWHITEFLAG;
			[id(69)] long SC_FOLDLEVELHEADERFLAG;
			[id(70)] long SC_FOLDLEVELNUMBERMASK;
			[id(71)] long EDGE_NONE;
			[id(72)] long EDGE_LINE;
			[id(73)] long EDGE_BACKGROUND;
			[id(74)] long CARET_SLOP;
			[id(75)] long CARET_CENTER;
			[id(76)] long CARET_STRICT;
			[id(77)] long SC_MOD_INSERTTEXT;
			[id(78)] long SC_MOD_DELETETEXT;
			[id(79)] long SC_MOD_CHANGESTYLE;
			[id(80)] long SC_MOD_CHANGEFOLD;
			[id(81)] long SC_PERFORMED_USER;
			[id(82)] long SC_PERFORMED_UNDO;
			[id(83)] long SC_PERFORMED_REDO;
			[id(84)] long SC_LASTSTEPINUNDOREDO;
			[id(85)] long SC_MOD_CHANGEMARKER;
			[id(86)] long SC_MOD_BEFOREINSERT;
			[id(87)] long SC_MOD_BEFOREDELETE;
			[id(88)] long SC_MODEVENTMASKALL;
			[id(89)] long SCN_STYLENEEDED;
			[id(90)] long SCN_CHARADDED;
			[id(91)] long SCN_SAVEPOINTREACHED;
			[id(92)] long SCN_SAVEPOINTLEFT;
			[id(93)] long SCN_MODIFYATTEMPTRO;
			[id(94)] long SCN_KEY;
			[id(95)] long SCN_DOUBLECLICK;
			[id(96)] long SCN_UPDATEUI;
			[id(97)] long SCN_CHECKBRACE;
			[id(98)] long SCN_MODIFIED;
			[id(99)] long SCN_MACRORECORD;
			[id(100)] long SCN_MARGINCLICK;
			[id(101)] long SCN_NEEDSHOWN;
			[id(102)] long SCEN_CHANGE;
			[id(103)] long SCEN_SETFOCUS;
			[id(104)] long SCEN_KILLFOCUS;
			[id(105)] long SCK_DOWN;
			[id(106)] long SCK_UP;
			[id(107)] long SCK_LEFT;
			[id(108)] long SCK_RIGHT;
			[id(109)] long SCK_HOME;
			[id(110)] long SCK_END;
			[id(111)] long SCK_PRIOR;
			[id(112)] long SCK_NEXT;
			[id(113)] long SCK_DELETE;
			[id(114)] long SCK_INSERT;
			[id(115)] long SCK_ESCAPE;
			[id(116)] long SCK_BACK;
			[id(117)] long SCK_TAB;
			[id(118)] long SCK_RETURN;
			[id(119)] long SCK_ADD;
			[id(120)] long SCK_SUBTRACT;
			[id(121)] long SCK_DIVIDE;
			[id(122)] long SCMOD_SHIFT;
			[id(123)] long SCMOD_CTRL;
			[id(124)] long SCMOD_ALT;
			[id(125)] long SCLEX_CONTAINER;
			[id(126)] long SCLEX_NULL;
			[id(127)] long SCLEX_PYTHON;
			[id(128)] long SCLEX_CPP;
			[id(129)] long SCLEX_HTML;
			[id(130)] long SCLEX_XML;
			[id(131)] long SCLEX_PERL;
			[id(132)] long SCLEX_SQL;
			[id(133)] long SCLEX_VB;
			[id(134)] long SCLEX_PROPERTIES;
			[id(135)] long SCLEX_ERRORLIST;
			[id(136)] long SCLEX_MAKEFILE;
			[id(137)] long SCLEX_BATCH;
			[id(138)] long SCLEX_XCODE;
			[id(139)] long SCLEX_LATEX;
			[id(140)] long SCLEX_LUA;
			[id(141)] long SCE_P_DEFAULT;
			[id(142)] long SCE_P_COMMENTLINE;
			[id(143)] long SCE_P_NUMBER;
			[id(144)] long SCE_P_STRING;
			[id(145)] long SCE_P_CHARACTER;
			[id(146)] long SCE_P_WORD;
			[id(147)] long SCE_P_TRIPLE;
			[id(148)] long SCE_P_TRIPLEDOUBLE;
			[id(149)] long SCE_P_CLASSNAME;
			[id(150)] long SCE_P_DEFNAME;
			[id(151)] long SCE_P_OPERATOR;
			[id(152)] long SCE_P_IDENTIFIER;
			[id(153)] long SCE_P_COMMENTBLOCK;
			[id(154)] long SCE_P_STRINGEOL;
			[id(155)] long SCE_C_DEFAULT;
			[id(156)] long SCE_C_COMMENT;
			[id(157)] long SCE_C_COMMENTLINE;
			[id(158)] long SCE_C_COMMENTDOC;
			[id(159)] long SCE_C_NUMBER;
			[id(160)] long SCE_C_WORD;
			[id(161)] long SCE_C_STRING;
			[id(162)] long SCE_C_CHARACTER;
			[id(163)] long SCE_C_UUID;
			[id(164)] long SCE_C_PREPROCESSOR;
			[id(165)] long SCE_C_OPERATOR;
			[id(166)] long SCE_C_IDENTIFIER;
			[id(167)] long SCE_C_STRINGEOL;
			[id(168)] long SCE_H_DEFAULT;
			[id(169)] long SCE_H_TAG;
			[id(170)] long SCE_H_TAGUNKNOWN;
			[id(171)] long SCE_H_ATTRIBUTE;
			[id(172)] long SCE_H_ATTRIBUTEUNKNOWN;
			[id(173)] long SCE_H_NUMBER;
			[id(174)] long SCE_H_DOUBLESTRING;
			[id(175)] long SCE_H_SINGLESTRING;
			[id(176)] long SCE_H_OTHER;
			[id(177)] long SCE_H_COMMENT;
			[id(178)] long SCE_H_ENTITY;
			[id(179)] long SCE_H_TAGEND;
			[id(180)] long SCE_H_XMLSTART;
			[id(181)] long SCE_H_XMLEND;
			[id(182)] long SCE_H_SCRIPT;
			[id(183)] long SCE_H_ASP;
			[id(184)] long SCE_H_ASPAT;
			[id(185)] long SCE_H_CDATA;
			[id(186)] long SCE_H_QUESTION;
			[id(187)] long SCE_HJ_START;
			[id(188)] long SCE_HJ_DEFAULT;
			[id(189)] long SCE_HJ_COMMENT;
			[id(190)] long SCE_HJ_COMMENTLINE;
			[id(191)] long SCE_HJ_COMMENTDOC;
			[id(192)] long SCE_HJ_NUMBER;
			[id(193)] long SCE_HJ_WORD;
			[id(194)] long SCE_HJ_KEYWORD;
			[id(195)] long SCE_HJ_DOUBLESTRING;
			[id(196)] long SCE_HJ_SINGLESTRING;
			[id(197)] long SCE_HJ_SYMBOLS;
			[id(198)] long SCE_HJ_STRINGEOL;
			[id(199)] long SCE_HJA_START;
			[id(200)] long SCE_HJA_DEFAULT;
			[id(201)] long SCE_HJA_COMMENT;
			[id(202)] long SCE_HJA_COMMENTLINE;
			[id(203)] long SCE_HJA_COMMENTDOC;
			[id(204)] long SCE_HJA_NUMBER;
			[id(205)] long SCE_HJA_WORD;
			[id(206)] long SCE_HJA_KEYWORD;
			[id(207)] long SCE_HJA_DOUBLESTRING;
			[id(208)] long SCE_HJA_SINGLESTRING;
			[id(209)] long SCE_HJA_SYMBOLS;
			[id(210)] long SCE_HJA_STRINGEOL;
			[id(211)] long SCE_HB_START;
			[id(212)] long SCE_HB_DEFAULT;
			[id(213)] long SCE_HB_COMMENTLINE;
			[id(214)] long SCE_HB_NUMBER;
			[id(215)] long SCE_HB_WORD;
			[id(216)] long SCE_HB_STRING;
			[id(217)] long SCE_HB_IDENTIFIER;
			[id(218)] long SCE_HB_STRINGEOL;
			[id(219)] long SCE_HBA_START;
			[id(220)] long SCE_HBA_DEFAULT;
			[id(221)] long SCE_HBA_COMMENTLINE;
			[id(222)] long SCE_HBA_NUMBER;
			[id(223)] long SCE_HBA_WORD;
			[id(224)] long SCE_HBA_STRING;
			[id(225)] long SCE_HBA_IDENTIFIER;
			[id(226)] long SCE_HBA_STRINGEOL;
			[id(227)] long SCE_HP_START;
			[id(228)] long SCE_HP_DEFAULT;
			[id(229)] long SCE_HP_COMMENTLINE;
			[id(230)] long SCE_HP_NUMBER;
			[id(231)] long SCE_HP_STRING;
			[id(232)] long SCE_HP_CHARACTER;
			[id(233)] long SCE_HP_WORD;
			[id(234)] long SCE_HP_TRIPLE;
			[id(235)] long SCE_HP_TRIPLEDOUBLE;
			[id(236)] long SCE_HP_CLASSNAME;
			[id(237)] long SCE_HP_DEFNAME;
			[id(238)] long SCE_HP_OPERATOR;
			[id(239)] long SCE_HP_IDENTIFIER;
			[id(240)] long SCE_HPA_START;
			[id(241)] long SCE_HPA_DEFAULT;
			[id(242)] long SCE_HPA_COMMENTLINE;
			[id(243)] long SCE_HPA_NUMBER;
			[id(244)] long SCE_HPA_STRING;
			[id(245)] long SCE_HPA_CHARACTER;
			[id(246)] long SCE_HPA_WORD;
			[id(247)] long SCE_HPA_TRIPLE;
			[id(248)] long SCE_HPA_TRIPLEDOUBLE;
			[id(249)] long SCE_HPA_CLASSNAME;
			[id(250)] long SCE_HPA_DEFNAME;
			[id(251)] long SCE_HPA_OPERATOR;
			[id(252)] long SCE_HPA_IDENTIFIER;
			[id(253)] long SCE_HPHP_DEFAULT;
			[id(254)] long SCE_HPHP_HSTRING;
			[id(255)] long SCE_HPHP_SIMPLESTRING;
			[id(256)] long SCE_HPHP_WORD;
			[id(257)] long SCE_HPHP_NUMBER;
			[id(258)] long SCE_HPHP_VARIABLE;
			[id(259)] long SCE_HPHP_COMMENT;
			[id(260)] long SCE_HPHP_COMMENTLINE;
			[id(261)] long SCE_HPHP_STRINGEOL;
			[id(262)] long SCE_PL_DEFAULT;
			[id(263)] long SCE_PL_HERE;
			[id(264)] long SCE_PL_COMMENTLINE;
			[id(265)] long SCE_PL_POD;
			[id(266)] long SCE_PL_NUMBER;
			[id(267)] long SCE_PL_WORD;
			[id(268)] long SCE_PL_STRING;
			[id(269)] long SCE_PL_CHARACTER;
			[id(270)] long SCE_PL_PUNCTUATION;
			[id(271)] long SCE_PL_PREPROCESSOR;
			[id(272)] long SCE_PL_OPERATOR;
			[id(273)] long SCE_PL_IDENTIFIER;
			[id(274)] long SCE_PL_SCALAR;
			[id(275)] long SCE_PL_ARRAY;
			[id(276)] long SCE_PL_HASH;
			[id(277)] long SCE_PL_SYMBOLTABLE;
			[id(278)] long SCE_PL_REF;
			[id(279)] long SCE_PL_REGEX;
			[id(280)] long SCE_PL_REGSUBST;
			[id(281)] long SCE_PL_LONGQUOTE;
			[id(282)] long SCE_PL_BACKTICKS;
			[id(283)] long SCE_PL_DATASECTION;
			[id(284)] long SCE_L_DEFAULT;
			[id(285)] long SCE_L_COMMAND;
			[id(286)] long SCE_L_TAG;
			[id(287)] long SCE_L_MATH;
			[id(288)] long SCE_L_COMMENT;
			[id(289)] long SCE_LUA_DEFAULT;
			[id(290)] long SCE_LUA_COMMENT;
			[id(291)] long SCE_LUA_COMMENTLINE;
			[id(292)] long SCE_LUA_COMMENTDOC;
			[id(293)] long SCE_LUA_NUMBER;
			[id(294)] long SCE_LUA_WORD;
			[id(295)] long SCE_LUA_STRING;
			[id(296)] long SCE_LUA_CHARACTER;
			[id(297)] long SCE_LUA_LITERALSTRING;
			[id(298)] long SCE_LUA_PREPROCESSOR;
			[id(299)] long SCE_LUA_OPERATOR;
			[id(300)] long SCE_LUA_IDENTIFIER;
			[id(301)] long SCE_LUA_STRINGEOL;
			[id(302)] long EN_CHANGE;
			[id(303)] long EN_KILLFOCUS;
			[id(304)] long EN_SETFOCUS;
			[id(305)] long EC_LEFTMARGIN;
			[id(306)] long EC_RIGHTMARGIN;
			[id(307)] long EC_USEFONTINFO;
			[id(308)] long SEL_EMPTY;
			[id(309)] long SEL_TEXT;
			[id(310)] long FR_MATCHCASE;
			[id(311)] long FR_WHOLEWORD;
			[id(312)] long FR_DOWN;
			[id(313)] long SHIFT_PRESSED;
			[id(314)] long LEFT_CTRL_PRESSED;
			[id(315)] long LEFT_ALT_PRESSED;
			//}}AFX_ODL_PROP
			//$(ODLPROP_SECTION]

		methods:
			//$[ODLMETH_SECTION)
			//{{AFX_ODL_METHOD(CScintillaCtrl)
			[id(316)] void AddText(long length,BSTR text);
			[id(317)] void AddStyledText(long length,BSTR c);
			[id(318)] void InsertText(long pos,BSTR text);
			[id(319)] void ClearAll(void);
			[id(320)] void ClearDocumentStyle(void);
			[id(321)] long GetLength(void);
			[id(322)] long GetCharAt(long pos);
			[id(323)] long GetCurrentPos(void);
			[id(324)] long GetAnchor(void);
			[id(325)] long GetStyleAt(long pos);
			[id(326)] void Redo(void);
			[id(327)] void SetUndoCollection(boolean collectUndo);
			[id(328)] void SelectAll(void);
			[id(329)] void SetSavePoint(void);
			[id(330)] long GetStyledText(long trMin,long trMax,BSTR* trStr);
			[id(331)] boolean CanRedo(void);
			[id(332)] long MarkerLineFromHandle(long handle);
			[id(333)] void MarkerDeleteHandle(long handle);
			[id(334)] boolean GetUndoCollection(void);
			[id(335)] long GetViewWS(void);
			[id(336)] void SetViewWS(long viewWS);
			[id(337)] long PositionFromPoint(long x,long y);
			[id(338)] void GotoLine(long line);
			[id(339)] void GotoPos(long pos);
			[id(340)] void SetAnchor(long posAnchor);
			[id(341)] long GetCurLine(long length,BSTR* textStr);
			[id(342)] long GetEndStyled(void);
			[id(343)] void ConvertEOLs(void);
			[id(344)] long GetEOLMode(void);
			[id(345)] void SetEOLMode(long eolMode);
			[id(346)] void StartStyling(long pos,long mask);
			[id(347)] void SetStyling(long length,long style);
			[id(348)] boolean GetBufferedDraw(void);
			[id(349)] void SetBufferedDraw(boolean buffered);
			[id(350)] void SetTabWidth(long tabWidth);
			[id(351)] long GetTabWidth(void);
			[id(352)] void SetCodePage(long codePage);
			[id(353)] void SetUsePalette(boolean usePalette);
			[id(354)] void MarkerDefine(long markerNumber,long markerSymbol);
			[id(355)] void MarkerSetFore(long markerNumber,long fore);
			[id(356)] void MarkerSetBack(long markerNumber,long back);
			[id(357)] void MarkerAdd(long line,long markerNumber);
			[id(358)] void MarkerDelete(long line,long markerNumber);
			[id(359)] void MarkerDeleteAll(long markerNumber);
			[id(360)] long MarkerGet(long line);
			[id(361)] long MarkerNext(long lineStart,long markerMask);
			[id(362)] long MarkerPrevious(long lineStart,long markerMask);
			[id(363)] void SetMarginTypeN(long margin,long marginType);
			[id(364)] long GetMarginTypeN(long margin);
			[id(365)] void SetMarginWidthN(long margin,long pixelWidth);
			[id(366)] long GetMarginWidthN(long margin);
			[id(367)] void SetMarginMaskN(long margin,long mask);
			[id(368)] long GetMarginMaskN(long margin);
			[id(369)] void SetMarginSensitiveN(long margin,boolean sensitive);
			[id(370)] boolean GetMarginSensitiveN(long margin);
			[id(371)] void StyleClearAll(void);
			[id(372)] void StyleSetFore(long style,long fore);
			[id(373)] void StyleSetBack(long style,long back);
			[id(374)] void StyleSetBold(long style,boolean bold);
			[id(375)] void StyleSetItalic(long style,boolean italic);
			[id(376)] void StyleSetSize(long style,long sizePoints);
			[id(377)] void StyleSetFont(long style,BSTR fontName);
			[id(378)] void StyleSetEOLFilled(long style,boolean filled);
			[id(379)] void StyleResetDefault(void);
			[id(380)] void StyleSetUnderline(long style,boolean underline);
			[id(381)] void StyleSetCharacterSet(long style,long characterSet);
			[id(382)] void SetSelFore(boolean useSetting,long fore);
			[id(383)] void SetSelBack(boolean useSetting,long back);
			[id(384)] void SetCaretFore(long fore);
			[id(385)] void AssignCmdKey(short kmKey,short kmMod,long msg);
			[id(386)] void ClearCmdKey(short kmKey,short kmMod);
			[id(387)] void ClearAllCmdKeys(void);
			[id(388)] void SetStylingEx(long length,BSTR styles);
			[id(389)] long GetCaretPeriod(void);
			[id(390)] void SetCaretPeriod(long periodMilliseconds);
			[id(391)] void SetWordChars(BSTR characters);
			[id(392)] void BeginUndoAction(void);
			[id(393)] void EndUndoAction(void);
			[id(394)] void IndicSetStyle(long indic,long style);
			[id(395)] long IndicGetStyle(long indic);
			[id(396)] void IndicSetFore(long indic,long fore);
			[id(397)] long IndicGetFore(long indic);
			[id(398)] void SetStyleBits(long bits);
			[id(399)] long GetStyleBits(void);
			[id(400)] void SetLineState(long line,long state);
			[id(401)] long GetLineState(long line);
			[id(402)] long GetMaxLineState(void);
			[id(403)] void AutoCShow(long lenEntered,BSTR itemList);
			[id(404)] void AutoCCancel(void);
			[id(405)] boolean AutoCActive(void);
			[id(406)] long AutoCPosStart(void);
			[id(407)] void AutoCComplete(void);
			[id(408)] void AutoCStops(BSTR characterSet);
			[id(409)] void AutoCSetSeparator(long separatorCharacter);
			[id(410)] long AutoCGetSeparator(void);
			[id(411)] void AutoCSelect(BSTR text);
			[id(412)] void AutoCSetCancelAtStart(boolean cancel);
			[id(413)] boolean AutoCGetCancelAtStart(void);
			[id(414)] void SetIndent(long indentSize);
			[id(415)] long GetIndent(void);
			[id(416)] void SetUseTabs(boolean useTabs);
			[id(417)] boolean GetUseTabs(void);
			[id(418)] void SetLineIndentation(long line,long indentSize);
			[id(419)] long GetLineIndentation(long line);
			[id(420)] long GetLineIndentPosition(long line);
			[id(421)] long GetColumn(long pos);
			[id(422)] void SetHScrollBar(boolean show);
			[id(423)] boolean GetHScrollBar(void);
			[id(424)] void SetIndentationGuides(boolean show);
			[id(425)] boolean GetIndentationGuides(void);
			[id(426)] void SetHighlightGuide(long column);
			[id(427)] long GetHighlightGuide(void);
			[id(428)] long GetLineEndPosition(long line);
			[id(429)] long GetCodePage(void);
			[id(430)] long GetCaretFore(void);
			[id(431)] boolean GetUsePalette(void);
			[id(432)] boolean GetReadOnly(void);
			[id(433)] void SetCurrentPos(long pos);
			[id(434)] void SetSelectionStart(long pos);
			[id(435)] long GetSelectionStart(void);
			[id(436)] void SetSelectionEnd(long pos);
			[id(437)] long GetSelectionEnd(void);
			[id(438)] void SetPrintMagnification(long magnification);
			[id(439)] long GetPrintMagnification(void);
			[id(440)] void SetPrintColourMode(long mode);
			[id(441)] long GetPrintColourMode(void);
			[id(442)] long FindText(long flags,long ftMin,long ftMax,BSTR ftStr);
			[id(443)] void FormatRange(boolean draw,long fr);
			[id(444)] long GetFirstVisibleLine(void);
			[id(445)] long GetLine(long line,BSTR* textStr);
			[id(446)] long GetLineCount(void);
			[id(447)] void SetMarginLeft(long width);
			[id(448)] long GetMarginLeft(void);
			[id(449)] void SetMarginRight(long width);
			[id(450)] long GetMarginRight(void);
			[id(451)] boolean GetModify(void);
			[id(452)] void SetSel(long start,long end);
			[id(453)] long GetSelText(BSTR* textStr);
			[id(454)] long GetTextRange(long trMin,long trMax,BSTR* trStr);
			[id(455)] void HideSelection(boolean normal);
			[id(456)] long PointXFromPosition(long pos);
			[id(457)] long PointYFromPosition(long pos);
			[id(458)] long LineFromPosition(long pos);
			[id(459)] long PositionFromLine(long line);
			[id(460)] void LineScroll(long columns,long lines);
			[id(461)] void ScrollCaret(void);
			[id(462)] void ReplaceSel(BSTR text);
			[id(463)] void SetReadOnly(boolean readOnly);
			[id(464)] void Null(void);
			[id(465)] boolean CanPaste(void);
			[id(466)] boolean CanUndo(void);
			[id(467)] void EmptyUndoBuffer(void);
			[id(468)] void Undo(void);
			[id(469)] void Cut(void);
			[id(470)] void Copy(void);
			[id(471)] void Paste(void);
			[id(472)] void Clear(void);
			[id(473)] void SetText(BSTR text);
			[id(474)] long GetText(long length,BSTR* textStr);
			[id(475)] long GetTextLength(void);
			[id(476)] long GetDirectFunction(void);
			[id(477)] long GetDirectPointer(void);
			[id(478)] void CallTipShow(long pos,BSTR definition);
			[id(479)] void CallTipCancel(void);
			[id(480)] boolean CallTipActive(void);
			[id(481)] long CallTipPosStart(void);
			[id(482)] void CallTipSetHlt(long start,long end);
			[id(483)] void CallTipSetBack(long back);
			[id(484)] long VisibleFromDocLine(long line);
			[id(485)] long DocLineFromVisible(long lineDisplay);
			[id(486)] void SetFoldLevel(long line,long level);
			[id(487)] long GetFoldLevel(long line);
			[id(488)] long GetLastChild(long line,long level);
			[id(489)] long GetFoldParent(long line);
			[id(490)] void ShowLines(long lineStart,long lineEnd);
			[id(491)] void HideLines(long lineStart,long lineEnd);
			[id(492)] boolean GetLineVisible(long line);
			[id(493)] void SetFoldExpanded(long line,boolean expanded);
			[id(494)] boolean GetFoldExpanded(long line);
			[id(495)] void ToggleFold(long line);
			[id(496)] void EnsureVisible(long line);
			[id(497)] void SetFoldFlags(long flags);
			[id(498)] void LineDown(void);
			[id(499)] void LineDownExtend(void);
			[id(500)] void LineUp(void);
			[id(501)] void LineUpExtend(void);
			[id(502)] void CharLeft(void);
			[id(503)] void CharLeftExtend(void);
			[id(504)] void CharRight(void);
			[id(505)] void CharRightExtend(void);
			[id(506)] void WordLeft(void);
			[id(507)] void WordLeftExtend(void);
			[id(508)] void WordRight(void);
			[id(509)] void WordRightExtend(void);
			[id(510)] void Home(void);
			[id(511)] void HomeExtend(void);
			[id(512)] void LineEnd(void);
			[id(513)] void LineEndExtend(void);
			[id(514)] void DocumentStart(void);
			[id(515)] void DocumentStartExtend(void);
			[id(516)] void DocumentEnd(void);
			[id(517)] void DocumentEndExtend(void);
			[id(518)] void PageUp(void);
			[id(519)] void PageUpExtend(void);
			[id(520)] void PageDown(void);
			[id(521)] void PageDownExtend(void);
			[id(522)] void EditToggleOvertype(void);
			[id(523)] void Cancel(void);
			[id(524)] void DeleteBack(void);
			[id(525)] void Tab(void);
			[id(526)] void BackTab(void);
			[id(527)] void NewLine(void);
			[id(528)] void FormFeed(void);
			[id(529)] void VCHome(void);
			[id(530)] void VCHomeExtend(void);
			[id(531)] void ZoomIn(void);
			[id(532)] void ZoomOut(void);
			[id(533)] void DelWordLeft(void);
			[id(534)] void DelWordRight(void);
			[id(535)] void LineCut(void);
			[id(536)] void LineDelete(void);
			[id(537)] void LineTranspose(void);
			[id(538)] void LowerCase(void);
			[id(539)] void UpperCase(void);
			[id(540)] void LineScrollDown(void);
			[id(541)] void LineScrollUp(void);
			[id(542)] long LineLength(long line);
			[id(543)] void BraceHighlight(long pos1,long pos2);
			[id(544)] void BraceBadLight(long pos);
			[id(545)] long BraceMatch(long pos);
			[id(546)] boolean GetViewEOL(void);
			[id(547)] void SetViewEOL(boolean visible);
			[id(548)] long GetDocPointer(void);
			[id(549)] void SetDocPointer(long pointer);
			[id(550)] void SetModEventMask(long mask);
			[id(551)] long GetEdgeColumn(void);
			[id(552)] void SetEdgeColumn(long column);
			[id(553)] long GetEdgeMode(void);
			[id(554)] void SetEdgeMode(long mode);
			[id(555)] long GetEdgeColour(void);
			[id(556)] void SetEdgeColour(long edgeColour);
			[id(557)] void SearchAnchor(void);
			[id(558)] long SearchNext(long flags,BSTR text);
			[id(559)] long SearchPrev(long flags,BSTR text);
			[id(560)] void SetCaretPolicy(long caretPolicy,long caretSlop);
			[id(561)] long LinesOnScreen(void);
			[id(562)] void UsePopUp(boolean allowPopUp);
			[id(563)] boolean SelectionIsRectangle(void);
			[id(564)] void SetZoom(long zoom);
			[id(565)] long GetZoom(void);
			[id(566)] long CreateDocument(void);
			[id(567)] void AddRefDocument(long doc);
			[id(568)] void ReleaseDocument(long doc);
			[id(569)] long GetModEventMask(void);
			[id(570)] void GrabFocus(void);
			[id(571)] void StartRecord(void);
			[id(572)] void StopRecord(void);
			[id(573)] void SetLexer(long lexer);
			[id(574)] long GetLexer(void);
			[id(575)] void Colourise(long start,long end);
			[id(576)] void SetProperty(BSTR key,BSTR value);
			[id(577)] void SetKeyWords(long keywordSet,BSTR keyWords);
			[id(578)] boolean EM_CanPaste(void);
			[id(579)] boolean EM_CanUndo(void);
			[id(580)] long EM_CharFromPos(long ptX,long ptY);
			[id(581)] void EM_EmptyUndoBuffer(void);
			[id(582)] void EM_ExGetSel(long* crMin,long* crMax);
			[id(583)] long EM_ExLineFromChar(long pos);
			[id(584)] void EM_ExSetSel(long crMin,long crMax);
			[id(585)] long EM_FindText(long flags,long ftMin,long ftMax,BSTR ftStr);
			[id(586)] long EM_FindTextEx(long flags,long ftMin,long ftMax,BSTR ftStr,long* ftTxtMin,long* ftTxtMax);
			[id(587)] void EM_FormatRange(boolean draw,long fr);
			[id(588)] long EM_GetFirstVisibleLine(void);
			[id(589)] long EM_GetLine(long line,long textLen,BSTR* textStr);
			[id(590)] long EM_GetLineCount(void);
			[id(591)] long EM_GetMargins(void);
			[id(592)] boolean EM_GetModify(void);
			[id(593)] void EM_GetRect(long* rLeft,long* rTop,long* rRight,long* rBottom);
			[id(594)] long EM_GetSel(void);
			[id(595)] long EM_GetSelText(BSTR* textStr);
			[id(596)] long EM_GetTextRange(long trMin,long trMax,BSTR* trStr);
			[id(597)] void EM_HideSelection(boolean normal);
			[id(598)] long EM_LineFromChar(long pos);
			[id(599)] long EM_LineIndex(long line);
			[id(600)] long EM_LineLength(long line);
			[id(601)] void EM_LineScroll(long columns,long lines);
			[id(602)] void EM_PosFromChar(long* ptX,long* ptY,long pos);
			[id(603)] void EM_ReplaceSel(BSTR text);
			[id(604)] void EM_ScrollCaret(void);
			[id(605)] void EM_SelectionType(void);
			[id(606)] void EM_SetMargins(long flags,long values);
			[id(607)] void EM_SetReadOnly(boolean readOnly);
			[id(608)] void EM_SetSel(long start,long end);
			[id(609)] void EM_Undo(void);
			[id(610)] void WM_Null(void);
			[id(611)] void WM_Clear(void);
			[id(612)] void WM_Command(void);
			[id(613)] void WM_Copy(void);
			[id(614)] void WM_Cut(void);
			[id(615)] long WM_GetText(long length,BSTR* textStr);
			[id(616)] long WM_GetTextLength(void);
			[id(617)] void WM_Notify(long id,long stuff);
			[id(618)] void WM_Paste(void);
			[id(619)] void WM_SetText(BSTR text);
			[id(620)] void WM_Undo(void);
			//}}AFX_ODL_METHOD
			//$(ODLMETH_SECTION]
	};

	[ uuid(4A2DFF61-C146-11D3-9CDF-482471000000),
	  helpstring("Event interface for Scintilla Control") ]
	dispinterface _DScintillaEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			//$[ODLEVT_SECTION)
			//{{AFX_ODL_EVENT(CScintillaCtrl)
			[id(1)] void StyleNeeded(long position);
			[id(2)] void CharAdded(long ch);
			[id(3)] void SavePointReached(void);
			[id(4)] void SavePointLeft(void);
			[id(5)] void ModifyAttemptRO(void);
			[id(6)] void Key(long ch,long modifiers);
			[id(7)] void DoubleClick(void);
			[id(8)] void UpdateUI(void);
			[id(9)] void Modified(long position,long modificationType,BSTR text,long length,long linesAdded,long line,long foldLevelNow,long foldLevelPrev);
			[id(10)] void MacroRecord(long message,long wParam,long lParam);
			[id(11)] void MarginClick(long modifiers,long position,long margin);
			[id(12)] void NeedShown(long position,long length);
			[id(13)] void EN_Change(void);
			//}}AFX_ODL_EVENT
			//$(ODLEVT_SECTION]
	};

	[ uuid(4A2DFF62-C146-11D3-9CDF-482471000000),
	  helpstring("Scintilla Control"), control ]
	coclass Scintilla
	{
		[default] dispinterface _DScintilla;
		[default, source] dispinterface _DScintillaEvents;
	};


	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
